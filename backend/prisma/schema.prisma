generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int        @id @default(autoincrement())
  email             String     @unique
  role              String     @default("user")
  studentId         String?    @unique
  name              String?
  magicToken        String?
  magicTokenExpiry  DateTime?
  lastMagicLinkSent DateTime?
  avatar            String?    @default("")
  bio               String?    @db.VarChar(160)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  comments          Comment[]
  createdCourses    Course[]
  createdQuestions  Question[] @relation("CreatedBy")
  likedComments     Comment[]  @relation("CommentLikes")
  reportedComments  Comment[]  @relation("CommentReports")
  likedQuestions    Question[] @relation("QuestionLikes")
  reportedQuestions Question[] @relation("QuestionReports")
  bookmarks         Question[] @relation("UserBookmarks")
}

model Question {
  id           Int       @id @default(autoincrement())
  type         String
  text         String
  options      Json
  createdById  Int
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  courseId     Int
  examId       Int?
  marks        Int
  image        String?
  comments     Comment[]
  course       Course    @relation(fields: [courseId], references: [id])
  createdBy    User      @relation("CreatedBy", fields: [createdById], references: [id])
  exam         Exam?     @relation(fields: [examId], references: [id])
  likedBy      User[]    @relation("QuestionLikes")
  reportedBy   User[]    @relation("QuestionReports")
  bookmarkedBy User[]    @relation("UserBookmarks")
}

model Comment {
  id              Int       @id @default(autoincrement())
  text            String
  questionId      Int
  userId          Int
  parentCommentId Int?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  parentComment   Comment?  @relation("CommentReplies", fields: [parentCommentId], references: [id])
  replies         Comment[] @relation("CommentReplies")
  question        Question  @relation(fields: [questionId], references: [id])
  user            User      @relation(fields: [userId], references: [id])
  likedBy         User[]    @relation("CommentLikes")
  reportedBy      User[]    @relation("CommentReports")
}

model Course {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  code        String?    @unique
  description String?
  createdById Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  tags        String[]
  image       String?
  createdBy   User       @relation(fields: [createdById], references: [id])
  exams       Exam[]
  questions   Question[]
}

model Exam {
  id        Int        @id @default(autoincrement())
  title     String
  type      String
  courseId  Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  course    Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  questions Question[]

  @@unique([courseId, title])
  @@unique([courseId, title], map: "exam_unique_per_course")
}
