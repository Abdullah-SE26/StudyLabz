generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  email             String    @unique
  role              String    @default("user")
  studentId         String?   @unique
  name              String?
  magicToken        String?
  magicTokenExpiry  DateTime?
  lastMagicLinkSent DateTime?
  avatar            String?   @default("")
  bio               String?   @db.VarChar(160)

  // Relations
  bookmarks         Question[] @relation("UserBookmarks")
  createdQuestions  Question[] @relation("CreatedBy")
  likedQuestions    Question[] @relation("QuestionLikes")
  reportedQuestions Question[] @relation("QuestionReports")

  comments         Comment[] // user’s own comments
  likedComments    Comment[] @relation("CommentLikes")
  reportedComments Comment[] @relation("CommentReports")

  createdCourses Course[] // <-- added relation to courses

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Question {
  id      Int     @id @default(autoincrement())
  type    String
  text    String
  options Json
  marks   Int // marks for the question
  image   String? // optional URL for diagram/image

  course   Course @relation(fields: [courseId], references: [id])
  courseId Int

  exam   Exam? @relation(fields: [examId], references: [id])
  examId Int? // link question to a specific exam (quiz/midterm/final)

  createdBy   User @relation("CreatedBy", fields: [createdById], references: [id])
  createdById Int

  comments     Comment[]
  likedBy      User[]    @relation("QuestionLikes")
  reportedBy   User[]    @relation("QuestionReports")
  bookmarkedBy User[]    @relation("UserBookmarks")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id   Int    @id @default(autoincrement())
  text String

  question   Question @relation(fields: [questionId], references: [id])
  questionId Int

  user   User @relation(fields: [userId], references: [id])
  userId Int

  parentComment   Comment? @relation("CommentReplies", fields: [parentCommentId], references: [id])
  parentCommentId Int?

  replies Comment[] @relation("CommentReplies")

  likedBy    User[] @relation("CommentLikes")
  reportedBy User[] @relation("CommentReports")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  code        String?  @unique
  description String?
  image       String?
  tags        String[]

  createdBy   User @relation(fields: [createdById], references: [id])
  createdById Int

  questions Question[]
  exams     Exam[] // ❌ no need for onDelete here

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Exam {
  id        Int        @id @default(autoincrement())
  title     String
  type      String
  course    Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  Int
  questions Question[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([courseId, title])
}
